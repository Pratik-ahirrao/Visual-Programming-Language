# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from unicodedata import name
import backend
from cProfile import label
from copyreg import constructor
from functools import partial
from pprint import pprint
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QLabel, QInputDialog
from PyQt5.QtWidgets import *
# from file_with_ui import Ui_MainWindow

class Main(QMainWindow):
    def __init__(self):
        self.buttons = []
        self.variables = []
        self.label = QtWidgets.QLabel()
        self.speed = 15
        self.is_removed = 0
        self.is_run = 0
        self.is_edited = 0
        self.num_buttons =0
        self.dict = {}
        self.obj1=backend.target_object('images.jpg')
        self.var = backend.variable()
        self.list_loop_buttons = []
        self.run_stack = []
        self.button_list = []
        self.if_list = []
        self.else_list = []
        self.bool_if_list = []
        self.operators = backend.operators()
        super().__init__()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(639, 480)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        _translate = QtCore.QCoreApplication.translate

        # Area 0

        self.scrollArea_4 = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_4.setWidgetResizable(True)
        self.scrollArea_4.setObjectName("scrollArea_4")
        self.scrollAreaWidgetContents_12 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_12.setGeometry(QtCore.QRect(0, 0, 196, 409))
        self.scrollAreaWidgetContents_12.setObjectName("scrollAreaWidgetContents_12")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_12)
        self.verticalLayout_6.setObjectName("verticalLayout_6")

        self.runButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents_12)
        self.runButton.setObjectName("runButton")
        self.runButton.setText(_translate("MainWindow", "Run"))
        self.runButton.clicked.connect(self.new_run)
        #self.runButton.setStyleSheet("background-color : yellow")
        self.runButton.setStyleSheet("QPushButton"
                             "{"
                             "background-color : lightblue;"
                             "}"
                             "QPushButton::pressed"
                             "{"
                             "background-color : green;"
                             "}"
                             )
        self.verticalLayout_6.addWidget(self.runButton)

        self.editButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents_12)
        self.editButton.setObjectName("editButton")
        self.editButton.setStyleSheet("QPushButton"
                             "{"
                             "background-color : lightblue;"
                             "}"
                             "QPushButton::pressed"
                             "{"
                             "background-color : green;"
                             "}"
                             )
        self.editButton.setText(_translate("MainWindow", "Edit"))

        self.verticalLayout_6.addWidget(self.editButton)

        self.removeButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents_12)
        self.removeButton.setObjectName("removeButton")
        self.removeButton.setText(_translate("MainWindow", "Remove"))
        self.removeButton.setStyleSheet("QPushButton"
                             "{"
                             "background-color : lightblue;"
                             "}")
        # self.removeButton.clicked.connect(self.clickme)
        self.removeButton.clicked.connect(self.remove)
        self.verticalLayout_6.addWidget(self.removeButton)

        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_12)
        self.horizontalLayout_8.addWidget(self.scrollArea_4)

        

        self.ready_to_select = QtWidgets.QPushButton(self.scrollAreaWidgetContents_12)
        self.ready_to_select.setObjectName("ready to select")
        self.ready_to_select.setText(_translate("MainWindow", "Ready to select"))
        self.ready_to_select.setStyleSheet("QPushButton"
                             "{"
                             "background-color : lightblue;"
                             "}")
        self.ready_to_select.clicked.connect(self.ready_to_connect)
        self.verticalLayout_6.addWidget(self.ready_to_select)
        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_12)
        self.horizontalLayout_8.addWidget(self.scrollArea_4)

        # Area 1

        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_9 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_9.setGeometry(QtCore.QRect(0, 0, 196, 409))
        self.scrollAreaWidgetContents_9.setObjectName("scrollAreaWidgetContents_9")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_9)
        self.verticalLayout_4.setObjectName("verticalLayout_4")

        self.pushButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(partial(self.buttonClicks, "Move"))
        self.verticalLayout_4.addWidget(self.pushButton)

        self.pushButton_17 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_17.setObjectName("pushButton_3")
        self.pushButton_17.clicked.connect(partial(self.buttonClicks, "Loop"))
        self.verticalLayout_4.addWidget(self.pushButton_17)

        self.pushButton_if = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_if.setObjectName("pushButton_if")
        self.pushButton_if.clicked.connect(partial(self.buttonClicks, "If"))
        self.verticalLayout_4.addWidget(self.pushButton_if)

        self.pushButton_endif = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_endif.setObjectName("pushButton_endif")
        self.pushButton_endif.clicked.connect(partial(self.buttonClicks, "Endif"))
        self.verticalLayout_4.addWidget(self.pushButton_endif)

        self.pushButton_else = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_else.setObjectName("pushButton_else")
        self.pushButton_else.clicked.connect(partial(self.buttonClicks, "Else"))
        self.verticalLayout_4.addWidget(self.pushButton_else)

        self.pushButton_elseend = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_elseend.setObjectName("pushButton_elseend")
        self.pushButton_elseend.clicked.connect(partial(self.buttonClicks, "Endelse"))
        self.verticalLayout_4.addWidget(self.pushButton_elseend)

        self.pushButton_16 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_16.clicked.connect(partial(self.buttonClicks, "End Loop"))
        self.verticalLayout_4.addWidget(self.pushButton_16)

        self.pushButton_6 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(partial(self.buttonClicks, "Rotate"))
        self.verticalLayout_4.addWidget(self.pushButton_6)

        self.pushButton_9 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(partial(self.buttonClicks , "Create Variable"))
        self.verticalLayout_4.addWidget(self.pushButton_9)

        self.pushButton_14 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_14.clicked.connect(partial(self.buttonClicks, "Edit Variable"))
        self.verticalLayout_4.addWidget(self.pushButton_14)

        self.pushButton_10 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_10.clicked.connect(partial(self.buttonClicks, "Show Variable"))
        self.verticalLayout_4.addWidget(self.pushButton_10)

        self.pushButton_18 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_18.setObjectName("pushButton_18")
        self.pushButton_18.clicked.connect(partial(self.buttonClicks, "Add"))
        self.verticalLayout_4.addWidget(self.pushButton_18)

        self.pushButton_19 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_19.setObjectName("pushButton_19")
        self.pushButton_19.clicked.connect(partial(self.buttonClicks, "Sub"))
        self.verticalLayout_4.addWidget(self.pushButton_19)        

        self.pushButton_20 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_20.clicked.connect(partial(self.buttonClicks, "Div"))
        self.verticalLayout_4.addWidget(self.pushButton_20)

        self.pushButton_21 = QtWidgets.QPushButton(self.scrollAreaWidgetContents_9)
        self.pushButton_21.setObjectName("pushButton_21")
        self.pushButton_21.clicked.connect(partial(self.buttonClicks, "Mul"))
        self.verticalLayout_4.addWidget(self.pushButton_21)

        self.scrollArea.setWidget(self.scrollAreaWidgetContents_9)
        self.horizontalLayout_8.addWidget(self.scrollArea)

        # Area 2

        self.scrollArea_2 = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_10 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_10.setGeometry(QtCore.QRect(0, 0, 197, 409))
        self.scrollAreaWidgetContents_10.setObjectName("scrollAreaWidgetContents_10")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_10)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_10)
        self.horizontalLayout_8.addWidget(self.scrollArea_2)

        # Area 3
        

        self.scrollArea_3 = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_11 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_11.setGeometry(QtCore.QRect(0, 0, 196, 409))
        self.scrollAreaWidgetContents_11.setObjectName("scrollAreaWidgetContents_11")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_11)
        self.verticalLayout_6.setObjectName("verticalLayout_6")

       # self.pixmap = QPixmap('images.jpg')
        #self.pixmap = self.pixmap.scaled(QtCore.QSize(100, 100))
        # self.label.move(1000, 1000)
        #self.label.setPixmap(self.pixmap)
        #self.label.resize(self.pixmap.width(), self.pixmap.height())

        #print(self.label.x())
        #print(self.label.y())
        self.verticalLayout_6.addWidget(self.obj1.label)
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_11)
        self.horizontalLayout_8.addWidget(self.scrollArea_3)

        # Main Window

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 639, 24))
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Move"))
        self.pushButton_17.setText(_translate("MainWindow", "Loop"))
        self.pushButton_if.setText(_translate("MainWindow", "If"))
        self.pushButton_endif.setText(_translate("MainWindow", "Endif"))
        self.pushButton_else.setText(_translate("MainWindow", "Else"))
        self.pushButton_elseend.setText(_translate("MainWindow", "Endelse"))
        self.pushButton_6.setText(_translate("MainWindow", "Rotate"))
        self.pushButton_9.setText(_translate("MainWindow", "Create Variable"))
        self.pushButton_14.setText(_translate("MainWindow", "Edit Variable"))
        self.pushButton_10.setText(_translate("MainWindow", "Show Variable"))
        self.pushButton_16.setText(_translate("MainWindow", "End Loop"))
        self.pushButton_18.setText(_translate("MainWindow", "Add"))
        self.pushButton_19.setText(_translate("MainWindow", "Sub"))
        self.pushButton_20.setText(_translate("MainWindow", "Div"))
        self.pushButton_21.setText(_translate("MainWindow", "Mul"))

    def buttonClicks(self, buttonName):
        but = QtWidgets.QPushButton(buttonName,self.scrollAreaWidgetContents_10)
        but.setObjectName(str(self.num_buttons))
        but.setStyleSheet("QPushButton""{""background-color : lightblue;""}")
        self.dict[self.num_buttons] = but
        self.num_buttons+=1
        self.buttons.append(but)
        length = len(self.buttons)
        but.clicked.connect(partial(self.popUp, buttonName, but))
        self.verticalLayout_5.addWidget(but)

    def move_image(self):
        # self.label.move(self.label.x() + 10, self.label.y() + 10)
        self.label.move(self.label.x() + 1, self.label.y())
        print(self.label.x())
        print(self.label.y())

    def to_run_blocks():
        return

    def ready_to_connect(self):
        if self.ready_to_select.styleSheet() == "QPushButton{background-color : lightblue;}":
            self.ready_to_select.setStyleSheet("QPushButton""{""background-color : green;}")

        elif self.ready_to_select.styleSheet() == "QPushButton{background-color : green;}":
            self.ready_to_select.setStyleSheet("QPushButton""{""background-color : lightblue;}")
            for key in self.dict:
                self.dict[key].setStyleSheet("QPushButton""{""background-color : lightblue;}")

    def donothing(self):
        return                   

    def clickme(self):
        if self.is_removed == 0:
            self.removeButton.setStyleSheet("QPushButton{background-color : green;}")
            self.is_removed = 1
            print(self.removeButton.styleSheet())
        else:
            self.removeButton.setStyleSheet("QPushButton{background-color : lightblue;}")
            self.is_removed = 0

                
        print("pressed")                     

        # printing pressed       

    def keyPressEvent(self, event):
  
        # get the current co-ordinates of the label
        # X Co-ordinate
        x = self.label.x()
  
        # Y Co-ordinate
        y = self.label.y()
  
        # if up arrow key is pressed
        if event.key() == Qt.Key_Up:
            self.label.move(x, y - self.speed)
  
        # if down arrow key is pressed
        elif event.key() == Qt.Key_Down:
            self.label.move(x, y + self.speed)
  
        # if left arrow key is pressed
        elif event.key() == Qt.Key_Left:
            self.label.move(x - self.speed, y)
  
        # if down arrow key is pressed
        elif event.key() == Qt.Key_Right:
            self.label.move(x + self.speed, y)

    def add_loop_in_stack(self):
        self.list_loop_buttons = self.list_loop_buttons[::-1]
        #print(self.list_loop_buttons)
        buttonname=self.list_loop_buttons[0].text()
        x = buttonname.split()
        val = int(x[1])
        print('val of loop:'+ str(val))
        for j in range(val):  
            for i in range(1,len(self.list_loop_buttons)-1):
                self.run_stack.append(self.list_loop_buttons[i])
        self.list_loop_buttons = []

    def add_button_list_in_run_stack(self):
        for i in  range(len(self.button_list)):
            buttonname = self.button_list[i].text()
            x = buttonname.split()
            print("in_add_button "+str(x))
            if x[0] !="End":
                self.run_stack.append(self.button_list[i])
            else:
                self.list_loop_buttons.append(self.button_list[i])
                while(len(self.run_stack)!=0):
                    button = self.run_stack.pop()
                    buttonname = button.text()
                    p = buttonname.split()
                    print("in while loop")
                    if(p[0]=="Loop"):
                        self.list_loop_buttons.append(button)
                        self.add_loop_in_stack()
                        break
                    else:
                        self.list_loop_buttons.append(button)
                        continue

    def exec_run_stack(self):
        print(self.var.dict)
        #for i in self.run_stack:
        i = 0 
        while i < len(self.run_stack):          
            buttonName = self.run_stack[i].text()
            x = buttonName.split()
            if (x[0] == "Move"):
                if len(x) == 1:
                    x.append("0")
                
                val = self.var.getVariable(x[1])

                if val == None:
                    val = int(x[1])
                
                if val >= 0:
                    print(x[1])
                    self.obj1.move_right(val)
                elif val < 0:
                        print(int(x[1]))
                        self.obj1.move_left(val)

            elif (x[0] == "Rotate"):
                if len(x) == 1:
                    x.append("0")
                print(x[1])
                self.obj1.rotate(float(x[1]))

            elif(x[0] == "Edit"):
                if len(x) == 2:
                    x.append("0")
                if(x[2] in self.variables):
                    self.var.setVal(x[3])
                
            elif(x[0] == "Add"):
                if (len(x) < 3):
                    break
                
                elif (len(x) == 3):
                    val1 = self.var.getVariable(x[1])
                    val2 = self.var.getVariable(x[2])

                    if (val1 == None):
                        val1 = int(x[1])
                    
                    if (val2 == None):
                        val2 = int(x[2])

                    print("Addition: ",self.operators.add(val1, val2))
            
            elif(x[0] == "Sub"):
                if (len(x) < 3):
                    break
                
                elif (len(x) == 3):
                    val1 = self.var.getVariable(x[1])
                    val2 = self.var.getVariable(x[2])

                    if (val1 == None):
                        val1 = int(x[1])
                    
                    if (val2 == None):
                        val2 = int(x[2])

                    print("Subtraction: ",self.operators.sub(val1, val2))

            elif(x[0] == "Div"):
                if (len(x) < 3):
                    break
                
                elif (len(x) == 3):
                    val1 = self.var.getVariable(x[1])
                    val2 = self.var.getVariable(x[2])

                    if (val1 == None):
                        val1 = int(x[1])
                    
                    if (val2 == None):
                        val2 = int(x[2])

                    print("Division: ",self.operators.div(val1, val2))

            elif(x[0] == "Mul"):
                if (len(x) < 3):
                    break
                
                elif (len(x) == 3):
                    val1 = self.var.getVariable(x[1])
                    val2 = self.var.getVariable(x[2])

                    if (val1 == None):
                        val1 = int(x[1])
                    
                    if (val2 == None):
                        val2 = int(x[2])

                    print("Multiplication: ",self.operators.mul(val1, val2))

            elif(x[0]=="If"):
                print(x)
                if x[1]=="False":
                    i = int(x[2])
                    print(i)
                elif x[1]=="True":
                     print("exec")

            elif(x[0]=="Else"):
                print(x)
                if x[1]=="True":
                    i = int(x[2])
                    print(i)
                elif x[1]=="False":
                     print("exec")

            i+=1        

        self.run_stack = []

    def check_condition(self,i):
       if(int(i)>=10):
           return False
       return True   


    def assign_if_else_in_run_stack(self):
        for i in range(len(self.run_stack)):
            buttonName = self.run_stack[i].text()
            x = buttonName.split()
            print("in ifelse:" + x[0])
            if x[0]=="If":
                self.if_list.append(i)
                self.bool_if_list.append(x[1])
            elif x[0]=="Endif":
                #bt = self.run_stack[self.if_list.pop()]
                _translate = QtCore.QCoreApplication.translate
                it = self.if_list.pop()
                bt = self.run_stack[it].text()
                self.run_stack[it].setText(_translate("MainWindow", bt + " "+str(i)))

            elif x[0]=="Else":
                self.else_list.append(i)
                _translate = QtCore.QCoreApplication.translate
                self.run_stack[i].setText(_translate("MainWindow", buttonName + " "+str(self.bool_if_list.pop())))

            elif x[0]=="Endelse":
                _translate = QtCore.QCoreApplication.translate
                it = self.else_list.pop()
                bt = self.run_stack[it].text()
                self.run_stack[it].setText(_translate("MainWindow", bt + " "+str(i)))
                #self.run_stack[self.else_list.pop()]+= ' ' + str(i)   

    def new_run(self):
        if (self.ready_to_select.styleSheet() == "QPushButton{background-color : lightblue;}"):
            for i in self.buttons:
                self.button_list.append(i)
        else:

            for i in self.buttons:

                if i.styleSheet() == "QPushButton{background-color : green;}":
                    self.button_list.append(i)

        self.add_button_list_in_run_stack()
        self.assign_if_else_in_run_stack()
        self.exec_run_stack()


    def popUp(self, buttonName, but):
        print("Button Clicked:" + buttonName)

        if(self.ready_to_select.styleSheet() == "QPushButton{background-color : green;}" and but.styleSheet() == "QPushButton""{""background-color : green;}"):
            but.setStyleSheet("QPushButton""{""background-color : lightblue;}")

        elif (self.ready_to_select.styleSheet() == "QPushButton{background-color : green;}"):
            but.setStyleSheet("QPushButton""{""background-color : green;}")

        elif (buttonName == "Move"):
            _translate = QtCore.QCoreApplication.translate
            i, okPressed = QInputDialog.getText(self, "Get integer","Enter x co-ordinate:")
        
            if okPressed:
                but.setText(_translate("MainWindow", "Move " + i))

        elif (buttonName == "Loop"):
            _translate = QtCore.QCoreApplication.translate
            i, okPressed = QInputDialog.getInt(self, "Get integer","Enter Loop Value:")
        
            if okPressed:
                but.setText(_translate("MainWindow", "Loop " + str(i)))

        elif (buttonName == "Rotate"):
            _translate = QtCore.QCoreApplication.translate
            i, okPressed = QInputDialog.getInt(self, "Get integer","Enter Degree of rotation:")
        
            if okPressed:
                but.setText(_translate("MainWindow", "Rotate " + str(i)))

        elif (buttonName == "Create Variable"):
            _translate = QtCore.QCoreApplication.translate
            name, okPressed = QInputDialog.getText(self, "Get Text","Enter Variable Name:")
            typ, okPressed = QInputDialog.getText(self, "Get Text","Enter Variable Type:")

            if typ == "integer":
                val, okPressed = QInputDialog.getInt(self, "Get Text","Enter Value:")
                but.setText(_translate("MainWindow", "Variable " + name + " " + str(val)))
                self.var.addVariable(name, val)
            else:
                val, okPressed = QInputDialog.getText(self, "Get Text","Enter Value:")
                but.setText(_translate("MainWindow", "Variable " + name + " " + val))
                self.var.addVariable(name, val)

            self.var.addVariable(name, val)

        elif (buttonName == "Edit Variable"):
            _translate = QtCore.QCoreApplication.translate
            j, okPressed1 = QInputDialog.getText(self, "Get Text","Enter Variable Name:")

            i, okPressed = QInputDialog.getInt(self, "Get Integer","Enter Variable Value:")
        
            if okPressed and okPressed1:
                but.setText(_translate("MainWindow", "Edit Variable " + str(j) + " " +str(i)))

        elif (buttonName=="End Loop"):
             but.setText(_translate("MainWindow", "End Loop"))
        
        elif (buttonName == "Add"):
            _translate = QtCore.QCoreApplication.translate
            i, okPressed = QInputDialog.getText(self, "Get integer","Enter Value:")
        
            if okPressed:
                but.setText(_translate("MainWindow", "Add " + i))
            
            i, okPressed = QInputDialog.getText(self, "Get integer","Enter Value:")

            if okPressed:
                but.setText(_translate("MainWindow", but.text() + " " + i))

        elif (buttonName == "Div"):
            _translate = QtCore.QCoreApplication.translate
            i, okPressed = QInputDialog.getText(self, "Get integer","Enter Value:")
        
            if okPressed:
                but.setText(_translate("MainWindow", "Div " + i))
            
            i, okPressed = QInputDialog.getText(self, "Get integer","Enter Value:")

            if okPressed:
                but.setText(_translate("MainWindow", but.text() + " " + i))

        elif (buttonName == "Sub"):
            _translate = QtCore.QCoreApplication.translate
            i, okPressed = QInputDialog.getText(self, "Get integer","Enter Value:")
        
            if okPressed:
                but.setText(_translate("MainWindow", "Sub " + i))
            
            i, okPressed = QInputDialog.getText(self, "Get integer","Enter Value:")

            if okPressed:
                but.setText(_translate("MainWindow", but.text() + " " + i))

        elif (buttonName == "Mul"):
            _translate = QtCore.QCoreApplication.translate
            i, okPressed = QInputDialog.getText(self, "Get integer","Enter Value:")
        
            if okPressed:
                but.setText(_translate("MainWindow", "Mul " + i))
            
            i, okPressed = QInputDialog.getText(self, "Get integer","Enter Value:")

            if okPressed:
                but.setText(_translate("MainWindow", but.text() + " " + i))
       
        elif(buttonName=="If"):
            _translate = QtCore.QCoreApplication.translate
            i, okPressed = QInputDialog.getText(self, "Get Text","Enter the condition:")
            if okPressed:                
                but.setText(_translate("MainWindow", "If " + str(self.check_condition(i))))
        
        elif(buttonName=="Endif"):
            _translate = QtCore.QCoreApplication.translate
            but.setText(_translate("MainWindow", "Endif"))

        elif(buttonName=="Else"):

            _translate = QtCore.QCoreApplication.translate
            but.setText(_translate("MainWindow", "Else"))

        elif(buttonName=="Endelse"):
            _translate = QtCore.QCoreApplication.translate
            but.setText(_translate("MainWindow", "Elseend"))                        










    def run(self):
        if (self.ready_to_select.styleSheet() == "QPushButton{background-color : lightblue;}"):
            for i in self.buttons:
                buttonName = i.text()
                x = buttonName.split()
                if (x[0] == "Move"):
                    #self.move_image()

                    if len(x) == 1:
                        x.append("0")

                    if int(x[1]) >= 0:
                        print(x[1])
                        self.obj1.move_right(int(x[1]))
                    elif int(x[1]) < 0:
                        print(int(x[1]))
                        self.obj1.move_left(int(x[1]))
                elif (x[0] == "Rotate"):
                    if len(x) == 1:
                        x.append("0")
                    print(x[1])
                    self.obj1.rotate(float(x[1]))

                elif(x[0] == "Create"):
                    if len(x) == 2:
                        x.append("0")
                    #print(x[2])
                    self.var.setName(x[2])
                    a = self.var.getVal()
                    self.variables.append(self.var)
                    print(a)

                elif(x[0] == "Edit"):
                    if len(x) == 2:
                        x.append("0")
                    if(x[2] in self.variables):
                        self.var.setVal(x[3])




        else:
            for i in self.buttons:
                if i.styleSheet() == "QPushButton{background-color : green;}":
                    buttonName = i.text()
                    x = buttonName.split()
                    if (x[0] == "Move"):
                        #self.move_image()

                        if len(x) == 1:
                            x.append("0")

                        if int(x[1]) >= 0:
                            print(x[1])
                            self.obj1.move_right(int(x[1]))
                        elif int(x[1]) < 0:
                            print(int(x[1]))
                            self.obj1.move_left(int(x[1]))
                    elif (x[0] == "Rotate"):
                        if len(x) == 1:
                            x.append("0")
                        print(x[1])
                        self.obj1.rotate(float(x[1]))
                    

    def remove(self):
        array = []
        
        for i in self.buttons:
            if (self.ready_to_select.styleSheet() == "QPushButton{background-color : green;}" and i.styleSheet() == "QPushButton""{""background-color : green;}"):
                name = i.text()
                x = name.split()

                if x[0] == "Variable":
                    if len(x) == 3:
                        self.var.remVariable(x[1])
                i.setParent(None)
                array.append(i)


        for i in array:
            self.buttons.remove(i)
                    
               


if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    window = Main()
    window.show()
    sys.exit(app.exec_())


#Comments

    # def select_blocks_to_run(self,button_name):
    #     if self.dict[button_name].styleSheet() == "QPushButton{background-color : lightblue;}":
    #         self.dict[button_name].setStyleSheet("QPushButton{background-color : green;}")
    #     elif self.dict[button_name].styleSheet() == "QPushButton{background-color : green;}":
    #         self.dict[button_name].setStyleSheet("QPushButton{background-color : lightblue;}")
